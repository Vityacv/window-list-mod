// -*- mode: js2; indent-tabs-mode: nil; js2-basic-offset: 4 -*-

const Gio = imports.gi.Gio;
const GObject = imports.gi.GObject;
const Gdk = imports.gi.Gdk;
const Gtk = imports.gi.Gtk;
const Lang = imports.lang;

const ExtensionUtils = imports.misc.extensionUtils;
const Me = ExtensionUtils.getCurrentExtension();
const Convenience = Me.imports.convenience;


function init() {
    //Convenience.initTranslations();
}

const WindowListPrefsWidget = new GObject.Class({
    Name: 'WindowListMod.Prefs.Widget',
    GTypeName: 'WindowListModPrefsWidget',
    Extends: Gtk.Grid,

    _init: function(params) {
        this.parent(params);

        this.margin = 24;
        this.row_spacing = 6;
        this.orientation = Gtk.Orientation.VERTICAL;

        let groupingLabel = '<b>' + ("Window Grouping") + '</b>';
        this.add(new Gtk.Label({ label: groupingLabel, use_markup: true,
                                 halign: Gtk.Align.START }));

        let align = new Gtk.Alignment({ left_padding: 12 });
        this.add(align);

        let grid = new Gtk.Grid({ orientation: Gtk.Orientation.VERTICAL,
                                  row_spacing: 6,
                                  column_spacing: 6 });
        align.add(grid);

        this._settings = Convenience.getSettings();
        let currentMode = this._settings.get_string('grouping-mode');
        let range = this._settings.get_range('grouping-mode');
        let modes = range.deep_unpack()[1].deep_unpack();

        let modeLabels = {
            'never': ("Never group windows"),
            'auto': ("Group windows when space is limited"),
            'always': ("Always group windows")
        };

        let radio = null;
        for (let i = 0; i < modes.length; i++) {
            let mode = modes[i];
            let label = modeLabels[mode];
            if (!label) {
               log('Unhandled option "%s" for grouping-mode'.format(mode));
               continue;
            }

            radio = new Gtk.RadioButton({ active: currentMode == mode,
                                          label: label,
                                          group: radio });
            grid.add(radio);

            radio.connect('toggled', Lang.bind(this, function(button) {
                if (button.active)
                    this._settings.set_string('grouping-mode', mode);
            }));
        }

        let check = new Gtk.CheckButton({ label: ("Show on all monitors"),
                                          margin_top: 6 });
        this._settings.bind('show-on-all-monitors', check, 'active', Gio.SettingsBindFlags.DEFAULT);
        this.add(check);

        let config = this._settings;
        {
            let adjustment = new Gtk.Adjustment({
			lower: 0,
			upper: 72,
			step_increment: 1.0
		});
            let scale = new Gtk.HScale({
			digits:0,
			adjustment: adjustment,
			value_pos: Gtk.PositionType.RIGHT
		});
            scale.set_value(config.get_int("font-size"));

            let hbox = new Gtk.Box({
            orientation: Gtk.Orientation.HORIZONTAL,
            spacing: 20
            });
                hbox.add(new Gtk.Label({ label: "Font size:	", use_markup: true,
                halign: Gtk.Align.START }));
            hbox.pack_end(scale, true, true, 0);
            this.add(hbox);
            scale.connect('value-changed', function(sw) {
            var newval = sw.get_value();
            var oldval = config.get_int("font-size");
            if (newval != oldval) {
                config.set_int("font-size",newval);
            }
        });
        }
        {
            let adjustment = new Gtk.Adjustment({
            lower: 8,
            upper: 256,
            step_increment: 1.0
        });
            let scale = new Gtk.HScale({
            digits:0,
            adjustment: adjustment,
            value_pos: Gtk.PositionType.RIGHT
        });
            scale.set_value(config.get_int("panel-height"));

            let hbox = new Gtk.Box({
            orientation: Gtk.Orientation.HORIZONTAL,
            spacing: 20
            });
                hbox.add(new Gtk.Label({ label: "Panel height:	", use_markup: true,
                halign: Gtk.Align.START }));
            hbox.pack_end(scale, true, true, 0);
            this.add(hbox);
            scale.connect('value-changed', function(sw) {
            var newval = sw.get_value();
            var oldval = config.get_int("panel-height");
            var iconval = config.get_int("icon-size");
            let max=newval-8;
            if(max<8)
            	max=8;
            if (newval != oldval) {
            	config.set_int("icon-size",max);
                config.set_int("panel-height",newval);
            }
        });
        }
        {
            let adjustment = new Gtk.Adjustment({
            lower: 0,
            upper: 256,
            step_increment: 1.0
        });
            let scale = new Gtk.HScale({
            digits:0,
            adjustment: adjustment,
            value_pos: Gtk.PositionType.RIGHT
        });
            scale.set_value(config.get_int("icon-size"));

            let hbox = new Gtk.Box({
            orientation: Gtk.Orientation.HORIZONTAL,
            spacing: 20
            });
            hbox.add(new Gtk.Label({ label: "Icon size:		", use_markup: true,
                halign: Gtk.Align.START }));
            hbox.pack_end(scale, true, true, 0);
            this.add(hbox);
            scale.connect('value-changed', function(sw) {
            var newval = sw.get_value();
            var oldval = config.get_int("icon-size");
            let max=config.get_int("panel-height")-8;
            if(max<8)
            	max=8;
            if (newval != oldval) {
                config.set_int("icon-size",newval);
            }
        });
        }
        {
        	let color = new Gtk.ColorButton();
        	color.use_alpha = 1;
        	let rgba = new Gdk.RGBA();
        	rgba.parse(config.get_string("panel-color"));
        	color.set_rgba(rgba);
        	let hbox = new Gtk.Box({
            orientation: Gtk.Orientation.HORIZONTAL,
            spacing: 20
            });
            hbox.add(new Gtk.Label({ label: "Panel color:	", use_markup: true,
                halign: Gtk.Align.START }));
            hbox.add(color);
        	this.add(hbox);
            color.connect('color-set', function(sw) {
            config.set_string("panel-color",sw.rgba.to_string());
            });
        }
        /*{
        	let color = new Gtk.ColorButton();
        	let rgba = new Gdk.RGBA();
        	rgba.parse(config.get_string("button-color"));
        	color.set_rgba(rgba);
        	let hbox = new Gtk.Box({
            orientation: Gtk.Orientation.HORIZONTAL,
            spacing: 20
            });
            hbox.add(new Gtk.Label({ label: "Button color:	", use_markup: true,
                halign: Gtk.Align.START }));
            hbox.add(color);
        	this.add(hbox);
        }*/
    }
});

function buildPrefsWidget() {
    let widget = new WindowListPrefsWidget();
    widget.show_all();

    return widget;
}
