--- extension.js	2017-07-20 02:01:51.000000000 +0300
+++ extension.js.new	2017-09-17 23:16:26.837327000 +0300
@@ -19,7 +19,11 @@
 const Gettext = imports.gettext.domain('gnome-shell-extensions');
 const _ = Gettext.gettext;
 
-const ICON_TEXTURE_SIZE = 24;
+var ICON_TEXTURE_SIZE = 16;
+var gbox = 0;
+var bAdded = 0;
+var panelh = 0;
+var panelOpacity = 0;
 const DND_ACTIVATE_TIMEOUT = 500;
 
 const GroupingMode = {
@@ -152,7 +156,8 @@
         this.actor = new St.BoxLayout({ style_class: 'window-button-box',
                                         x_expand: true, y_expand: true });
 
-        this._icon = new St.Bin({ style_class: 'window-button-icon' });
+        this._icon = new St.Bin({ //style_class: 'window-button-icon' 
+    });
         this.actor.add(this._icon);
         this.label_actor = new St.Label({ y_align: Clutter.ActorAlign.CENTER });
         this.actor.add(this.label_actor);
@@ -178,6 +183,30 @@
             this._metaWindow.connect('notify::minimized',
                                     Lang.bind(this, this._minimizedChanged));
         this._minimizedChanged();
+        this._notifyUrgentId =
+            this._metaWindow.connect('notify::urgent',
+                                    Lang.bind(this, this._urgentChanged));
+        this._notifyDemandAttentionId =
+            this._metaWindow.connect('notify::demand-attention',
+                                    Lang.bind(this, this._demandAttentionChanged));
+    },
+
+    _urgentChanged: function() {
+        if(this._metaWindow.urgent)
+            this.actor.get_parent().get_parent().set_style('color: white;\
+  background-color: rgba(206, 92, 0, 1.0);\
+  border: 1px solid #101010;');
+        else
+            this.actor.get_parent().get_parent().set_style('');
+    },
+
+    _demandAttentionChanged: function() {
+        if(this._metaWindow.demand-attention)
+            this.actor.set_style('color: white;\
+  background-color: rgba(180, 0, 0, 1.0);\
+  border: 1px solid #101010;');
+        else
+            this.actor.set_style('');
     },
 
     _minimizedChanged: function() {
@@ -229,7 +258,6 @@
                                      button_mask: St.ButtonMask.ONE |
                                                   St.ButtonMask.THREE });
         this.actor._delegate = this;
-
         this.actor.connect('allocation-changed',
                            Lang.bind(this, this._updateIconGeometry));
         this.actor.connect('clicked', Lang.bind(this, this._onClicked));
@@ -501,7 +529,7 @@
                                                     x_expand: true });
         stack.add_actor(this._multiWindowTitle);
 
-        this._icon = new St.Bin({ style_class: 'window-button-icon',
+        this._icon = new St.Bin({ //style_class: 'window-button-icon',
                                   child: app.create_icon_texture(ICON_TEXTURE_SIZE) });
         this._multiWindowTitle.add(this._icon);
 
@@ -782,6 +810,34 @@
     }
 });
 
+
+function enablePanel(bEnable){
+/*    for(var propertyName in global.display) {
+                global.log(propertyName);
+            }*/
+  if(bEnable){
+   //Main.panel.actor.remove_actor(Main.panel._leftBox);
+   Main.panel.actor.remove_actor(Main.panel._centerBox);
+   Main.panel.actor.remove_actor(Main.panel._rightBox);
+   Main.panel.actor.height = 6;
+   Main.panel.actor.set_opacity(0);
+   gbox.add_actor(Main.panel._rightBox);
+   gbox.add_actor(Main.panel._centerBox);
+  }
+  else{
+   gbox.remove_actor(Main.panel._centerBox);
+   gbox.remove_actor(Main.panel._rightBox);
+   Main.panel.actor.height = panelh;
+   Main.panel.actor.set_opacity(panelOpacity);
+   //Main.panel.actor.add_actor(Main.panel._leftBox);
+   Main.panel.actor.add_actor(Main.panel._centerBox);
+   Main.panel.actor.add_actor(Main.panel._rightBox);
+  }
+    let windows = global.get_window_actors();
+    for (let i = 0; i < windows.length; i++)
+            windows[i].metaWindow.notify('gtk-application-id');
+}
+
 const WindowList = new Lang.Class({
     Name: 'WindowList',
 
@@ -797,10 +853,13 @@
         this.actor.connect('destroy', Lang.bind(this, this._onDestroy));
 
         let box = new St.BoxLayout({ x_expand: true, y_expand: true });
+        gbox=box;
+        panelh=Main.panel.actor.height;
+        panelOpacity=Main.panel.actor.get_opacity()
         this.actor.add_actor(box);
 
         let layout = new Clutter.BoxLayout({ homogeneous: true });
-        this._windowList = new St.Widget({ style_class: 'window-list',
+        this._windowList = new St.Widget({ //style_class: 'window-list',
                                            reactive: true,
                                            layout_manager: layout,
                                            x_align: Clutter.ActorAlign.START,
@@ -813,10 +872,14 @@
                 let node = this._windowList.get_theme_node();
                 let spacing = node.get_length('spacing');
                 this._windowList.layout_manager.spacing = spacing;
+                if(!bAdded){
+                  bAdded=1;
+                  enablePanel(1);
+                }
             }));
         this._windowList.connect('scroll-event', Lang.bind(this, this._onScrollEvent));
 
-        let indicatorsBox = new St.BoxLayout({ x_align: Clutter.ActorAlign.END });
+        let indicatorsBox = new St.BoxLayout({ x_align: Clutter.ActorAlign.END, visible: false });
         box.add(indicatorsBox);
 
         this._workspaceIndicator = new WorkspaceIndicator();
@@ -878,17 +941,22 @@
             Main.overview.connect('showing', Lang.bind(this, function() {
                 this.actor.hide();
                 this._updateKeyboardAnchor();
+                enablePanel(0);
             }));
 
         this._overviewHidingId =
             Main.overview.connect('hiding', Lang.bind(this, function() {
                 this.actor.visible = !Main.layoutManager.primaryMonitor.inFullscreen;
                 this._updateKeyboardAnchor();
+                enablePanel(1);
             }));
 
         this._fullscreenChangedId =
             global.screen.connect('in-fullscreen-changed', Lang.bind(this, function() {
                 this._updateKeyboardAnchor();
+                let windows = global.get_window_actors();
+    for (let i = 0; i < windows.length; i++)
+            windows[i].metaWindow.notify('gtk-application-id');
             }));
 
         this._dragBeginId =
@@ -910,6 +978,18 @@
                                    Lang.bind(this, this._groupingModeChanged));
         this._grouped = undefined;
         this._groupingModeChanged();
+        this._settings.connect('changed::font-size',
+                                   Lang.bind(this, this._fontSizeChanged));
+        this._fontSizeChanged();
+        this._settings.connect('changed::panel-height',
+                                   Lang.bind(this, this._panelHeightChanged));
+        this._panelHeightChanged();
+        this._settings.connect('changed::icon-size',
+                                   Lang.bind(this, this._iconSizeChanged));
+        this._iconSizeChanged();
+        this._settings.connect('changed::panel-color',
+                                   Lang.bind(this, this._panelColorChanged));
+        this._panelColorChanged();
     },
 
     _getDynamicWorkspacesSettings: function() {
@@ -952,7 +1032,7 @@
 
     _updatePosition: function() {
         this.actor.set_position(this._monitor.x,
-                                this._monitor.y + this._monitor.height - this.actor.height);
+                                this._monitor.y /*+ this._monitor.height - this.actor.height*/);
     },
 
     _updateWorkspaceIndicatorVisibility: function() {
@@ -1002,6 +1082,30 @@
         }
     },
 
+    _fontSizeChanged: function() {
+        this._fontSize = this._settings.get_int('font-size');
+        this._windowList.set_style("spacing: 0px;\
+  font-size: "+this._fontSize+"pt;");
+    },
+
+    _panelHeightChanged: function() {
+        this._panelHeight = this._settings.get_int('panel-height');
+        this.actor.height=this._panelHeight;
+    },
+
+    _iconSizeChanged: function() {
+        this._iconSize = this._settings.get_int('icon-size');
+        ICON_TEXTURE_SIZE = this._iconSize;
+        let windows = global.get_window_actors();
+        for (let i = 0; i < windows.length; i++)
+            windows[i].metaWindow.notify('gtk-application-id');
+    },
+
+    _panelColorChanged: function() {
+        this._panelColor = this._settings.get_string('panel-color');
+        this.actor.set_style("background-color: "+this._panelColor+";");
+    },
+
     _checkGrouping: function() {
         if (this._groupingMode != GroupingMode.AUTO)
             return;
@@ -1201,6 +1305,10 @@
     },
 
     _onDestroy: function() {
+        if(gbox){
+          enablePanel(0);
+          bAdded=0;
+        }
         this._workspaceSettings.disconnect(this._workspacesOnlyOnPrimaryChangedId);
         this._dynamicWorkspacesSettings.disconnect(this._dynamicWorkspacesChangedId);
 
