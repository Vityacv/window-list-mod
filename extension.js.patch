--- extension.js	2019-01-10 23:37:38.158900042 -0800
+++ extension.js.new	2019-01-11 21:26:15.156297791 -0800
@@ -18,7 +18,12 @@
 const Gettext = imports.gettext.domain('gnome-shell-extensions');
 const _ = Gettext.gettext;
 
-const ICON_TEXTURE_SIZE = 24;
+var ICON_TEXTURE_SIZE = 16;
+var clock = 0;
+var gbox = 0;
+var bAdded = 0;
+var panelh = 0;
+var panelOpacity = 0;
 const DND_ACTIVATE_TIMEOUT = 500;
 
 const GroupingMode = {
@@ -146,7 +151,8 @@
         this.actor = new St.BoxLayout({ style_class: 'window-button-box',
                                         x_expand: true, y_expand: true });
 
-        this._icon = new St.Bin({ style_class: 'window-button-icon' });
+        this._icon = new St.Bin({ //style_class: 'window-button-icon' 
+    });
         this.actor.add(this._icon);
         this.label_actor = new St.Label({ y_align: Clutter.ActorAlign.CENTER });
         this.actor.add(this.label_actor);
@@ -172,6 +178,30 @@
             this._metaWindow.connect('notify::minimized',
                                      this._minimizedChanged.bind(this));
         this._minimizedChanged();
+        this._notifyUrgentId =
+            this._metaWindow.connect('notify::urgent',
+                                    this._urgentChanged.bind(this));
+        this._notifyDemandAttentionId =
+            this._metaWindow.connect('notify::demand-attention',
+                                    this._demandAttentionChanged.bind(this));
+    }
+
+    _urgentChanged() {
+        if(this._metaWindow.urgent)
+            this.actor.get_parent().get_parent().set_style('color: white;\
+  background-color: rgba(206, 92, 0, 1.0);\
+  border: 1px solid #101010;');
+        else
+            this.actor.get_parent().get_parent().set_style('');
+    }
+
+    _demandAttentionChanged() {
+        if(this._metaWindow.demand-attention)
+            this.actor.set_style('color: white;\
+  background-color: rgba(180, 0, 0, 1.0);\
+  border: 1px solid #101010;');
+        else
+            this.actor.set_style('');
     }
 
     _minimizedChanged() {
@@ -223,7 +253,6 @@
                                      button_mask: St.ButtonMask.ONE |
                                                   St.ButtonMask.THREE });
         this.actor._delegate = this;
-
         this.actor.connect('allocation-changed',
                            this._updateIconGeometry.bind(this));
         this.actor.connect('clicked', this._onClicked.bind(this));
@@ -478,7 +507,7 @@
                                                     x_expand: true });
         stack.add_actor(this._multiWindowTitle);
 
-        this._icon = new St.Bin({ style_class: 'window-button-icon',
+        this._icon = new St.Bin({ //style_class: 'window-button-icon',
                                   child: app.create_icon_texture(ICON_TEXTURE_SIZE) });
         this._multiWindowTitle.add(this._icon);
 
@@ -754,6 +783,7 @@
     }
 };
 
+
 class WindowList {
     constructor(perMonitor, monitor) {
         this._perMonitor = perMonitor;
@@ -767,10 +797,14 @@
         this.actor.connect('destroy', this._onDestroy.bind(this));
 
         let box = new St.BoxLayout({ x_expand: true, y_expand: true });
+        gbox=box;
+	      clock = Main.panel._centerBox.get_children()[0];
+        panelh=Main.panel.actor.height;
+        panelOpacity=Main.panel.actor.get_opacity()
         this.actor.add_actor(box);
 
         let layout = new Clutter.BoxLayout({ homogeneous: true });
-        this._windowList = new St.Widget({ style_class: 'window-list',
+        this._windowList = new St.Widget({ //style_class: 'window-list',
                                            reactive: true,
                                            layout_manager: layout,
                                            x_align: Clutter.ActorAlign.START,
@@ -782,6 +816,9 @@
             let node = this._windowList.get_theme_node();
             let spacing = node.get_length('spacing');
             this._windowList.layout_manager.spacing = spacing;
+                if(!bAdded){
+                  bAdded=1;
+                }
         });
         this._windowList.connect('scroll-event', this._onScrollEvent.bind(this));
 
@@ -858,6 +895,9 @@
         this._fullscreenChangedId =
             global.screen.connect('in-fullscreen-changed', () => {
                 this._updateKeyboardAnchor();
+                let windows = global.get_window_actors();
+                for (let i = 0; i < windows.length; i++)
+                    windows[i].metaWindow.notify('gtk-application-id');
             });
 
         this._dragBeginId =
@@ -879,6 +919,18 @@
                                    this._groupingModeChanged.bind(this));
         this._grouped = undefined;
         this._groupingModeChanged();
+        this._settings.connect('changed::font-size',
+                                   this._fontSizeChanged.bind(this));
+        this._fontSizeChanged();
+        this._settings.connect('changed::panel-height',
+                                   this._panelHeightChanged.bind(this));
+        this._panelHeightChanged();
+        this._settings.connect('changed::icon-size',
+                                   this._iconSizeChanged.bind(this));
+        this._iconSizeChanged();
+        this._settings.connect('changed::panel-color',
+                                   this._panelColorChanged.bind(this));
+        this._panelColorChanged();
     }
 
     _getDynamicWorkspacesSettings() {
@@ -966,6 +1018,30 @@
         }
     }
 
+    _fontSizeChanged() {
+        this._fontSize = this._settings.get_int('font-size');
+        this._windowList.set_style("spacing: 0px;\
+  font-size: "+this._fontSize+"pt;");
+    }
+
+    _panelHeightChanged() {
+        this._panelHeight = this._settings.get_int('panel-height');
+        this.actor.height=this._panelHeight;
+    }
+
+    _iconSizeChanged() {
+        this._iconSize = this._settings.get_int('icon-size');
+        ICON_TEXTURE_SIZE = this._iconSize;
+        let windows = global.get_window_actors();
+        for (let i = 0; i < windows.length; i++)
+            windows[i].metaWindow.notify('gtk-application-id');
+    }
+
+    _panelColorChanged() {
+        this._panelColor = this._settings.get_string('panel-color');
+        this.actor.set_style("background-color: "+this._panelColor+";");
+    }
+
     _checkGrouping() {
         if (this._groupingMode != GroupingMode.AUTO)
             return;
@@ -1163,6 +1239,9 @@
     }
 
     _onDestroy() {
+        if(gbox){
+          bAdded=0;
+        }
         this._workspaceSettings.disconnect(this._workspacesOnlyOnPrimaryChangedId);
         this._dynamicWorkspacesSettings.disconnect(this._dynamicWorkspacesChangedId);
 
