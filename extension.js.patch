--- extension.js	2019-09-13 12:09:17.000000000 +0300
+++ extension.js.new	2019-09-22 00:35:01.854853632 +0300
@@ -14,7 +14,12 @@
 const Gettext = imports.gettext.domain('gnome-shell-extensions');
 const _ = Gettext.gettext;
 
-const ICON_TEXTURE_SIZE = 24;
+var ICON_TEXTURE_SIZE = 16;
+var clock = 0;
+var gbox = 0;
+var bAdded = 0;
+var panelh = 0;
+var panelOpacity = 0;
 const DND_ACTIVATE_TIMEOUT = 500;
 
 const GroupingMode = {
@@ -61,7 +66,7 @@
 
 class WindowContextMenu extends PopupMenu.PopupMenu {
     constructor(source, metaWindow) {
-        super(source, 0.5, St.Side.BOTTOM);
+        super(source, 0.5, St.Side.TOP);
 
         this._metaWindow = metaWindow;
 
@@ -144,7 +149,7 @@
             y_expand: true,
         });
 
-        this._icon = new St.Bin({ style_class: 'window-button-icon' });
+        this._icon = new St.Bin({}); //style_class: 'window-button-icon' });
         this.add(this._icon);
         this.label_actor = new St.Label({ y_align: Clutter.ActorAlign.CENTER });
         this.add(this.label_actor);
@@ -165,6 +170,30 @@
         this._notifyMinimizedId = this._metaWindow.connect(
             'notify::minimized', this._minimizedChanged.bind(this));
         this._minimizedChanged();
+        this._notifyUrgentId =
+            this._metaWindow.connect('notify::urgent',
+                                    this._urgentChanged.bind(this));
+        this._notifyDemandAttentionId =
+            this._metaWindow.connect('notify::demand-attention',
+                                    this._demandAttentionChanged.bind(this));
+    }
+
+    _urgentChanged() {
+        if(this._metaWindow.urgent)
+            this.actor.get_parent().get_parent().set_style('color: white;\
+  background-color: rgba(206, 92, 0, 1.0);\
+  border: 1px solid #101010;');
+        else
+            this.actor.get_parent().get_parent().set_style('');
+    }
+
+    _demandAttentionChanged() {
+        if(this._metaWindow.demand-attention)
+            this.actor.set_style('color: white;\
+  background-color: rgba(180, 0, 0, 1.0);\
+  border: 1px solid #101010;');
+        else
+            this.actor.set_style('');
     }
 
     _minimizedChanged() {
@@ -424,7 +453,7 @@
 
 class AppContextMenu extends PopupMenu.PopupMenu {
     constructor(source) {
-        super(source, 0.5, St.Side.BOTTOM);
+        super(source, 0.5, St.Side.TOP);
 
         this._appButton = source;
 
@@ -519,7 +548,7 @@
         this._multiWindowTitle.label_actor = label;
 
         this._menuManager = new PopupMenu.PopupMenuManager(this);
-        this._menu = new PopupMenu.PopupMenu(this, 0.5, St.Side.BOTTOM);
+        this._menu = new PopupMenu.PopupMenu(this, 0.5, St.Side.TOP);
         this._menu.connect('open-state-changed', _onMenuStateChanged);
         this._menu.actor.hide();
         this._menu.connect('activate', this._onMenuActivate.bind(this));
@@ -671,6 +700,40 @@
     }
 });
 
+function enablePanel(bEnable){
+/*    for(var propertyName in global.display) {
+                global.log(propertyName);
+            }*/
+
+  if(bEnable){
+   
+   Main.panel._centerBox.remove_actor(clock);
+   clock.set_parent(Main.panel._rightBox);
+   //Main.panel.actor.remove_actor(Main.panel._leftBox);
+   Main.panel._centerBox.remove_actor(clock);
+   Main.panel.actor.remove_actor(Main.panel._centerBox);
+   Main.panel.actor.remove_actor(Main.panel._rightBox);
+   Main.panel.actor.height = ExtensionUtils.getSettings().get_int('panel-height');
+   Main.panel.actor.set_opacity(0);
+   gbox.add_actor(Main.panel._rightBox);
+   gbox.add_actor(Main.panel._centerBox);
+  }
+  else{
+   Main.panel._rightBox.remove_actor(clock);
+   clock.set_parent(Main.panel._centerBox);
+   gbox.remove_actor(Main.panel._centerBox);
+   gbox.remove_actor(Main.panel._rightBox);
+   Main.panel.actor.height = panelh;
+   Main.panel.actor.set_opacity(panelOpacity);
+   //Main.panel.actor.add_actor(Main.panel._leftBox);
+   Main.panel.actor.add_actor(Main.panel._centerBox);
+   Main.panel.actor.add_actor(Main.panel._rightBox);
+  }
+    let windows = global.get_window_actors();
+    for (let i = 0; i < windows.length; i++)
+            windows[i].metaWindow.notify('gtk-application-id');
+}
+
 
 const WindowList = GObject.registerClass({
     GTypeName: 'WindowListWindowList',
@@ -696,10 +759,14 @@
 
         toggle.connect('notify::checked',
             this._updateWindowListVisibility.bind(this));
-
+        this.actor.add_actor(box);
+        gbox=box;
+        clock = Main.panel._centerBox.get_children()[0];
+        panelh=Main.panel.actor.height;
+        panelOpacity=Main.panel.actor.get_opacity()
         let layout = new Clutter.BoxLayout({ homogeneous: true });
         this._windowList = new St.Widget({
-            style_class: 'window-list',
+            //style_class: 'window-list',
             reactive: true,
             layout_manager: layout,
             x_align: Clutter.ActorAlign.START,
@@ -712,10 +779,14 @@
             let node = this._windowList.get_theme_node();
             let spacing = node.get_length('spacing');
             this._windowList.layout_manager.spacing = spacing;
+            if(!bAdded){
+               bAdded=1;
+               enablePanel(1);
+            }
         });
         this._windowList.connect('scroll-event', this._onScrollEvent.bind(this));
 
-        let indicatorsBox = new St.BoxLayout({ x_align: Clutter.ActorAlign.END });
+        let indicatorsBox = new St.BoxLayout({ x_align: Clutter.ActorAlign.END, visible: false });
         box.add(indicatorsBox);
 
         this._workspaceIndicator = new WorkspaceIndicator();
@@ -777,16 +848,21 @@
         this._overviewShowingId = Main.overview.connect('showing', () => {
             this.hide();
             this._updateKeyboardAnchor();
+            enablePanel(0);
         });
 
         this._overviewHidingId = Main.overview.connect('hiding', () => {
             this.visible = !Main.layoutManager.primaryMonitor.inFullscreen;
             this._updateKeyboardAnchor();
+            enablePanel(1);
         });
 
         this._fullscreenChangedId =
             global.display.connect('in-fullscreen-changed', () => {
                 this._updateKeyboardAnchor();
+                let windows = global.get_window_actors();
+    for (let i = 0; i < windows.length; i++)
+            windows[i].metaWindow.notify('gtk-application-id');
             });
 
         this._dragBeginId = Main.xdndHandler.connect('drag-begin',
@@ -805,6 +881,18 @@
             'changed::grouping-mode', this._groupingModeChanged.bind(this));
         this._grouped = undefined;
         this._groupingModeChanged();
+        this._settings.connect('changed::font-size',
+                                   this._fontSizeChanged.bind(this));
+        this._fontSizeChanged();
+        this._settings.connect('changed::panel-height',
+                                   this._panelHeightChanged.bind(this));
+        this._panelHeightChanged();
+        this._settings.connect('changed::icon-size',
+                                   this._iconSizeChanged.bind(this));
+        this._iconSizeChanged();
+        this._settings.connect('changed::panel-color',
+                                   this._panelColorChanged.bind(this));
+        this._panelColorChanged();
     }
 
     _onScrollEvent(actor, event) {
@@ -827,7 +915,7 @@
     _updatePosition() {
         this.set_position(
             this._monitor.x,
-            this._monitor.y + this._monitor.height - this.height);
+            this._monitor.y /*+ this._monitor.height - this.height*/);
     }
 
     _updateWorkspaceIndicatorVisibility() {
@@ -888,6 +976,30 @@
         }
     }
 
+    _fontSizeChanged() {
+        this._fontSize = this._settings.get_int('font-size');
+        this._windowList.set_style("spacing: 0px;\
+  font-size: "+this._fontSize+"pt;");
+    }
+
+    _panelHeightChanged() {
+        this._panelHeight = this._settings.get_int('panel-height');
+        this.actor.height=this._panelHeight;
+    }
+
+    _iconSizeChanged() {
+        this._iconSize = this._settings.get_int('icon-size');
+        ICON_TEXTURE_SIZE = this._iconSize;
+        let windows = global.get_window_actors();
+        for (let i = 0; i < windows.length; i++)
+            windows[i].metaWindow.notify('gtk-application-id');
+    }
+
+    _panelColorChanged() {
+        this._panelColor = this._settings.get_string('panel-color');
+        this.actor.set_style("background-color: "+this._panelColor+";");
+    }
+
     _checkGrouping() {
         if (this._groupingMode !== GroupingMode.AUTO)
             return;
@@ -1079,6 +1191,10 @@
     }
 
     _onDestroy() {
+        if(gbox){
+          enablePanel(0);
+          bAdded=0;
+        }
         this._mutterSettings.disconnect(this._workspacesOnlyOnPrimaryChangedId);
         this._mutterSettings.disconnect(this._dynamicWorkspacesChangedId);
 
