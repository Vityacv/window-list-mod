--- prefs.js	2019-03-12 02:05:45.000000000 +0300
+++ prefs.js.new	2019-03-16 10:16:19.285685000 +0300
@@ -1,7 +1,7 @@
 // -*- mode: js2; indent-tabs-mode: nil; js2-basic-offset: 4 -*-
 /* exported init buildPrefsWidget */
 
-const { Gio, GObject, Gtk } = imports.gi;
+const { Gio, GObject, Gdk, Gtk } = imports.gi;
 
 const Gettext = imports.gettext.domain('gnome-shell-extensions');
 const _ = Gettext.gettext;
@@ -10,7 +10,7 @@
 
 
 function init() {
-    ExtensionUtils.initTranslations();
+    //ExtensionUtils.initTranslations();
 }
 
 const WindowListPrefsWidget = GObject.registerClass(
@@ -22,7 +22,7 @@
         this.row_spacing = 6;
         this.orientation = Gtk.Orientation.VERTICAL;
 
-        let groupingLabel = '<b>%s</b>'.format(_('Window Grouping'));
+        let groupingLabel = '<b>%s</b>'.format(('Window Grouping'));
         this.add(new Gtk.Label({
             label: groupingLabel, use_markup: true,
             halign: Gtk.Align.START
@@ -44,9 +44,9 @@
         let modes = range.deep_unpack()[1].deep_unpack();
 
         let modeLabels = {
-            'never': _('Never group windows'),
-            'auto': _('Group windows when space is limited'),
-            'always': _('Always group windows')
+            'never': ('Never group windows'),
+            'auto': ('Group windows when space is limited'),
+            'always': ('Always group windows')
         };
 
         let radio = null;
@@ -72,11 +72,126 @@
         }
 
         let check = new Gtk.CheckButton({
-            label: _('Show on all monitors'),
+            label: ('Show on all monitors'),
             margin_top: 6
         });
         this._settings.bind('show-on-all-monitors', check, 'active', Gio.SettingsBindFlags.DEFAULT);
         this.add(check);
+        
+        let config = this._settings;
+        {
+            let adjustment = new Gtk.Adjustment({
+           lower: 0,
+           upper: 72,
+           step_increment: 1.0
+       });
+            let scale = new Gtk.HScale({
+           digits:0,
+           adjustment: adjustment,
+           value_pos: Gtk.PositionType.RIGHT
+       });
+            scale.set_value(config.get_int("font-size"));
+
+            let hbox = new Gtk.Box({
+            orientation: Gtk.Orientation.HORIZONTAL,
+            spacing: 20
+            });
+                hbox.add(new Gtk.Label({ label: "Font size:    ", use_markup: true,
+                halign: Gtk.Align.START }));
+            hbox.pack_end(scale, true, true, 0);
+            this.add(hbox);
+            scale.connect('value-changed', function(sw) {
+            var newval = sw.get_value();
+            var oldval = config.get_int("font-size");
+            if (newval != oldval) {
+                config.set_int("font-size",newval);
+            }
+        });
+        }
+        {
+            let adjustment = new Gtk.Adjustment({
+            lower: 8,
+            upper: 256,
+            step_increment: 1.0
+        });
+            let scale = new Gtk.HScale({
+            digits:0,
+            adjustment: adjustment,
+            value_pos: Gtk.PositionType.RIGHT
+        });
+            scale.set_value(config.get_int("panel-height"));
+
+            let hbox = new Gtk.Box({
+            orientation: Gtk.Orientation.HORIZONTAL,
+            spacing: 20
+            });
+                hbox.add(new Gtk.Label({ label: "Panel height: ", use_markup: true,
+                halign: Gtk.Align.START }));
+            hbox.pack_end(scale, true, true, 0);
+            this.add(hbox);
+            scale.connect('value-changed', function(sw) {
+            var newval = sw.get_value();
+            var oldval = config.get_int("panel-height");
+            var iconval = config.get_int("icon-size");
+            let max=newval-8;
+            if(max<8)
+               max=8;
+            if (newval != oldval) {
+               config.set_int("icon-size",max);
+                config.set_int("panel-height",newval);
+            }
+        });
+        }
+        {
+            let adjustment = new Gtk.Adjustment({
+            lower: 0,
+            upper: 256,
+            step_increment: 1.0
+        });
+            let scale = new Gtk.HScale({
+            digits:0,
+            adjustment: adjustment,
+            value_pos: Gtk.PositionType.RIGHT
+        });
+            scale.set_value(config.get_int("icon-size"));
+
+            let hbox = new Gtk.Box({
+            orientation: Gtk.Orientation.HORIZONTAL,
+            spacing: 20
+            });
+            hbox.add(new Gtk.Label({ label: "Icon size:        ", use_markup: true,
+                halign: Gtk.Align.START }));
+            hbox.pack_end(scale, true, true, 0);
+            this.add(hbox);
+            scale.connect('value-changed', function(sw) {
+            var newval = sw.get_value();
+            var oldval = config.get_int("icon-size");
+            let max=config.get_int("panel-height")-8;
+            if(max<8)
+               max=8;
+            if (newval != oldval) {
+                config.set_int("icon-size",newval);
+            }
+        });
+        }
+        {
+           let color = new Gtk.ColorButton();
+           color.use_alpha = 1;
+           let rgba = new Gdk.RGBA();
+           rgba.parse(config.get_string("panel-color"));
+           color.set_rgba(rgba);
+           let hbox = new Gtk.Box({
+            orientation: Gtk.Orientation.HORIZONTAL,
+            spacing: 20
+            });
+            hbox.add(new Gtk.Label({ label: "Panel color:  ", use_markup: true,
+                halign: Gtk.Align.START }));
+            hbox.add(color);
+           this.add(hbox);
+            color.connect('color-set', function(sw) {
+            config.set_string("panel-color",sw.rgba.to_string());
+            });
+        }
     }
 });
 
